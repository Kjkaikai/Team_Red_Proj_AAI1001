---
title: "World Map for Fertility Rate"
author: "Team_Red_Proj_AAI1001"
format: html
---

# Creating a interactive choropleth world map 
```{r}
library(gapminder)
library(plotly)
library(ggthemes)
library(RColorBrewer)
library(crosstalk)
library(DT) # To load data tables
library(tidyverse) # Include ggplot2, dpylr
library(readxl)
library(rmapshaper)
library(sf)
library(maps)
library(shiny)
```

# Cleaning and processing of data, output top 6 rows
```{r}
data <- read.csv("test.csv")
head(data)

data <- data %>%
  mutate(Fertility = as.numeric(as.character(Fertility)))
head(data)

world <- map_data("world")
```
```{r}
# Display all Brewer palettes
display.brewer.all()
```

# Add hovertext with data and data Frame 
```{r}
# Create a hover text column in 'data'
data$hover_text <- paste("Country: ", data$Country, "<br>Fertility Rate: ", data$Fertility, "<br>Population: ", data$Population)

joined_data <- data %>%
  right_join(world, by = c(Country = "region")) 

# Plotting with hover text
mapa_animado_3 <- joined_data %>%
  ggplot(aes(x = long, y = lat, group = group, fill = Fertility, text = hover_text)) + # Added 'text' aesthetic for custom hover info
  geom_polygon(color = "white", size = 0.01) +
  theme_void() +
  scale_fill_distiller(palette = "Spectral", name = "Fertility Rate") + 
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022")  +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object with hoverinfo
fig_3 <- ggplotly(mapa_animado_3, tooltip = "text")
fig_3
```


# Add ColourBrewer's colour gradient to the map 
```{r}
# Create a hover text column in 'data'
data$hover_text <- paste("Country: ", data$Country, "<br>Fertility Rate: ", data$Fertility, "<br>Population: ", data$Population)

joined_data <- data %>%
  right_join(world, by = c(Country = "region")) 

# Define the breaks and corresponding colors manually for "YlOrRd"
breaks <- c(0, 1, 2, 3, 4, 5, 6, 7)
colors <- colorRampPalette(rev(brewer.pal(9, "YlOrRd")))(length(breaks) - 1)

# Plot
mapa_animado_3 <- joined_data %>%
  ggplot(aes(x = long, y = lat, group = group, fill = Fertility, text = hover_text)) +
  geom_polygon(color = "white", size = 0.01) +
  theme_void() +
      scale_fill_fermenter(
        limits = c(0, 7),
        n.breaks = 6,
        palette = "YlOrBr",
        direction = -1,
        na.value = "gray90",
        guide = "colorbar"
      )  +
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022") +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object with hoverinfo
fig_3 <- ggplotly(mapa_animado_3, tooltip = "text")
fig_3

```

# Add world boundaries and land to the map with geojson files
```{r}
countries <-
  "borders/WB_countries_Admin0.geojson" |>
  read_sf() |>
  ms_simplify() |>
  st_make_valid() 

land <-
  "borders/WB_Land.geojson" |>
  read_sf() |>
  ms_simplify() |>
  st_cast("MULTIPOLYGON")

polygon <- st_polygon(
  x = list(rbind(
    c(-180.0001, 90),
    c(-179.9999, 90),
    c(-179.9999, -90),
    c(-180.0001, -90),
    c(-180.0001, 90)
  ))
) |>
  st_sfc() |>
  st_set_crs(4326) # Equirectangular projection
countries <-
  countries |>
  mutate(geometry = st_difference(geometry, polygon)) |>
  st_make_valid()

```

# Create a polygon object to represent the Earth's outline. 
```{r}
earth <- st_polygon(
  x = list(
    cbind(
      c(rep(-180, 181), rep(180, 181), -180), c(-90:90, 90:-90, -90)
    )
  )
) |>
  st_sfc() |>
  st_set_crs(4326) |> # Equirectangular projection
  st_as_sf()
```

# Join the data with the country code and convert the 'Fertility' column to numeric
```{r}
# Convert the 'Fertility' column to a numeric type.
data <- data %>%
  mutate(Fertility = as.numeric(as.character(Fertility))) 

# Left join to Country Code
joined_data <- countries %>%
  left_join(data, by = c("WB_A3" = "CountryCode"))
```

# Select the columns to display in the data table
```{r}
# Assuming joined_data is your initial dataset
selected_data <- joined_data %>%
  select(REGION_WB, GDP_MD_EST, WB_NAME, NAME_ZH, CONTINENT, POP_EST, Fertility, Population)

# Render the DataTable with selected columns
datatable(selected_data, options = list(autoWidth = TRUE))
```

# Plot map on ggplotly
```{r}
fig_4 <- 
  ggplot(joined_data) +
  geom_sf(data = earth, fill = "aliceblue") +
  geom_sf(data = land, fill = "gray90") +
  geom_sf(aes(fill = Fertility, text = hover_text), color = NA) + 
  scale_fill_viridis_c(option = "C", direction = -1, name = "Fertility Rate") + 
  scale_fill_fermenter(
      limits = c(0, 7),
      n.breaks = 6,
      palette = "YlOrBr",
      direction = -1,
      na.value = "gray90",
      guide = "colorbar" 
    ) +
  coord_sf(crs = st_crs("+proj=eqearth")) +
  theme_minimal() +
  theme(legend.position = "right")

fig_5 <- ggplotly(fig_4, tooltip = "text") 

fig_5
```


# Addition of a line graph and data table to the shiny app
```{r}
# Declaring Hover Text
joined_data$hover_text <- paste("Country: ", joined_data$Country, "<br>Fertility Rate: ", joined_data$Fertility, "<br>Population: ", joined_data$Population)

ui <- fluidPage(
  titlePanel("Interactive World Map"),
  sidebarLayout(
    sidebarPanel(
      helpText(tags$b("A rate of about 2.1 is known as Replacement Fertility because the population would stabilize if every two people had two children.")),
      helpText("Adjust the slider to filter countries based on their fertility rate. Use the button to highlight countries with a fertility rate below 2.1."),
      tags$p("Note: The slider mark at 2.1 represent the Replacement Fertility rate."),
      sliderInput("fertility_range", "Fertility Rate Range:",
                  min = 0,
                  max = 7,
                  value = c(0, 7),
                  step = 0.1),
      actionButton("toggle_fertility", "Countries Below Replacement Fertility")
    ),
mainPanel(
  div(style = "border: 1px solid #ccc; padding: 20px; margin-bottom: 20px;",
      plotlyOutput("worldMap", height = "600px")), # Output for the world map 
  div(style = "border: 1px solid #ccc; padding: 20px; margin-bottom: 20px;",
      plotlyOutput("popBarGraph")), # Output for the line graph 
  div(style = "border: 1px solid #ccc; padding: 20px;overflow-x: auto; overflow-x: auto;",
      DTOutput("countryTable")) # Output for the data table 
)
)
)

server <- function(input, output, session) {
  highlight_low_fertility <- reactiveVal(FALSE)

  observeEvent(input$toggle_fertility, {
    highlight_low_fertility(!highlight_low_fertility())
  })

  output$worldMap <- renderPlotly({
    filtered_data <- joined_data %>%
      filter(Fertility >= input$fertility_range[1], Fertility <= input$fertility_range[2])

    if (highlight_low_fertility()) {
      filtered_data$Fertility[filtered_data$Fertility >= 2.1] <- NA
    }

    fig_4 <- 
      ggplot(filtered_data) +
      geom_sf(data = earth, fill = "aliceblue") +
      geom_sf(data = land, fill = "gray90") +
      geom_sf(aes(fill = Fertility, text = hover_text), color = NA) +
      scale_fill_viridis_c(option = "C", direction = -1, name = "Fertility Rate", limits = c(0, 7), na.value = "gray90") +
      scale_fill_fermenter(
        limits = c(0, 7),
        n.breaks = 6,
        palette = "YlOrBr",
        direction = -1,
        na.value = "gray90",
        guide = "colorbar"
      ) + 
      coord_sf(crs = st_crs("+proj=eqearth")) +
      theme_minimal() +
      theme(
        legend.position = "right",
        axis.text.x = element_text(angle = 0)
      )

    ggplotly(fig_4, tooltip = "text")
  })

output$popBarGraph <- renderPlotly({
  # Filter data based on fertility range input
  filtered_data <- joined_data %>%
    filter(Fertility >= input$fertility_range[1], Fertility <= input$fertility_range[2])

  # Aggregate data for the line graph and count the number of countries
  line_data <- filtered_data %>%
    group_by(Fertility_bin = cut_width(Fertility, 0.5)) %>%
    summarize(
      Population = sum(Population, na.rm = TRUE),
      Country_Count = n() # Count the number of countries in each bin
    ) %>%
    ungroup() %>%
    arrange(Fertility_bin) # Ensure data is ordered

  # Plot the line graph
  line_plot <- ggplot(line_data, aes(x = Fertility_bin, y = Population, text = paste("Countries Count: ", Country_Count), group = 1)) +
    geom_line(color = "blue") + # Add a line
    geom_point(color = "red") + # Add points
    labs(x = "Fertility Rate", y = "Population") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + # Rotate x-axis labels for better readability
    scale_y_continuous(labels = scales::comma_format()) # Format y-axis labels to display population in comma-separated format

  # Add tooltips for hover-over interaction
  ggplotly(line_plot, tooltip = "text")
})

# Render the data table
output$countryTable <- renderDT({
  selected_data 
})
}

# Run the Shiny app
shinyApp(ui, server)

```






