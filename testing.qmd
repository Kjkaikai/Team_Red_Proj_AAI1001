---
title: "World Map for Fertility Rate"
author: "Team_Red_Proj_AAI1001"
format: html
---

# Creating a interactive choropleth world map 
```{r}
library(gapminder)
library(plotly)
library(ggthemes)
library(RColorBrewer)
library(crosstalk)
library(DT)
library(tidyverse) # Include ggplot2, dpylr
library(readxl)
library(rmapshaper)
library(sf)
library(maps)
library(shiny)
```

# To exclude Antarctica from the map
```{r}
world <- map_data("world") %>%
  filter(region != "Antarctica")
```

# Cleaning and processing of data, output top 5 rows
```{r}
data <- read.csv("test.csv")
head(data)

data <- data %>%
  mutate(Fertility = as.numeric(as.character(Fertility)))
head(data)
```

# Baseline structure for the Map 
```{r}

#| include = FALSE
# Set figure dimensions
#| fig.width=7
#| fig.height=5

# Display all Brewer palettes
display.brewer.all()

# Filter Gapminder data and join with world map data
  mapa_animado_3 <- data %>%
  right_join(world, by = c(Country = "region")) %>%
  ggplot(aes(long, lat, group = group, fill = `Fertility`)) +
  geom_polygon(color = "white", size = 0.01) +
  theme_void() +
  scale_fill_distiller(palette = "Spectral", name = "Fertility Rate") + # Use a continuous palette
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022")  +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object
fig_3 <- ggplotly(mapa_animado_3)

fig_3

```

# Add hovertext with data and data Frame 
```{r}
# Create a hover text column in 'data'
data$hover_text <- paste("Country: ", data$Country, "<br>Fertility Rate: ", data$Fertility, "<br>Population: ", data$Population)

joined_data <- data %>%
  right_join(world, by = c(Country = "region")) 

# Plotting with hover text
mapa_animado_3 <- joined_data %>%
  ggplot(aes(x = long, y = lat, group = group, fill = Fertility, text = hover_text)) + # Added 'text' aesthetic for custom hover info
  geom_polygon(color = "white", size = 0.01) +
  theme_void() +
  scale_fill_distiller(palette = "Spectral", name = "Fertility Rate") + 
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022")  +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object with hoverinfo
fig_3 <- ggplotly(mapa_animado_3, tooltip = "text")
fig_3
```


# Add ColourBrewer's colour gradient to the map 
```{r}
# Create a hover text column in 'data'
data$hover_text <- paste("Country: ", data$Country, "<br>Fertility Rate: ", data$Fertility, "<br>Population: ", data$Population)

joined_data <- data %>%
  right_join(world, by = c(Country = "region")) 

# Define the breaks and corresponding colors manually for "YlOrRd"
breaks <- c(0, 1, 2, 3, 4, 5, 6, 7)
colors <- colorRampPalette(rev(brewer.pal(9, "YlOrRd")))(length(breaks) - 1)

# Plot
mapa_animado_3 <- joined_data %>%
  ggplot(aes(x = long, y = lat, group = group, fill = Fertility, text = hover_text)) +
  geom_polygon(color = "white", size = 0.01) +
  theme_void() +
  scale_fill_gradientn(
    colours = colors,
    breaks = breaks,
    labels = as.character(breaks),
    values = scales::rescale(breaks, to = c(0, 1)),
    guide = guide_colorbar(title = "Fertility Rate", title.position = "top", title.hjust = 0.5),
    na.value = "grey90"
  ) +
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022") +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object with hoverinfo
fig_3 <- ggplotly(mapa_animado_3, tooltip = "text")
fig_3

```

# Display my joined_data into a dataframe and remove repeated country names 
```{r}

joined_data <- data %>%
  right_join(world, by = c(Country = "region")) %>%
    distinct(Country, .keep_all = TRUE)

datatable(joined_data, options = list(autoWidth = TRUE))

```

# Addition of Animation with Shiny
```{r}
# Data preparation
  data <- read.csv("test.csv")
  data <- data %>%
    mutate(Fertility = as.numeric(as.character(Fertility)),
  hover_text = paste("Country: ", Country, "<br>Fertility Rate: ", Fertility, "<br>Population: ", Population))  # Add 'hover_text' here after 'data' is defined

# UI definition
  
  world <- map_data("world") %>%
    filter(region != "Antarctica")
  
  joined_data <- data %>%
    right_join(world, by = c(Country = "region"))

# UI definition
ui <- fluidPage(
  titlePanel("Interactive World Map"),
  sidebarLayout(
    sidebarPanel(
      helpText("Adjust the slider to filter countries based on their fertility rate. Use the button to highlight countries with a fertility rate below 2.1."),
      tags$p("Note: The slider marks at 2.1 represent the average fertility rate."),
      sliderInput("fertility_range", "Fertility Rate Range:",
                  min = 0,  
                  max = 7,
                  value = c(0, 7),
                  step = 0.1),
      actionButton("toggle_fertility", "Toggle Highlight Countries Below 2.1")
    ),
    mainPanel(
      plotlyOutput("worldMap"),
      plotlyOutput("barGraph") 
    )
  )
)

# Server logic
server <- function(input, output, session) {
  # Reactive value to track the toggle state for fertility below 2.1
  highlight_low_fertility <- reactiveVal(FALSE)
  
  # Observe the toggle button click to update the reactive value
  observeEvent(input$toggle_fertility, {
    highlight_low_fertility(!highlight_low_fertility())
  })
  
  output$worldMap <- renderPlotly({
    # Conditionally modify the dataset based on the slider and toggle button state
    filtered_data <- reactive({
      dataset <- joined_data %>%
        filter(Fertility >= input$fertility_range[1], Fertility <= input$fertility_range[2])
      if (highlight_low_fertility()) {
        dataset$Fertility <- ifelse(dataset$Fertility < 2.1, dataset$Fertility, NA)
      }
      dataset
    })
    
    # Define the static breaks and corresponding colors
    colors <- colorRampPalette(rev(brewer.pal(9, name = "YlOrRd")))(7)
    
    # Proceed with plotting using the reactively filtered dataset
    mapa_animado_3 <- ggplot(filtered_data(), aes(x = long, y = lat, group = group, fill = Fertility, text = hover_text)) +
      geom_polygon(color = "white", size = 0.01) +
      theme_void() +
      scale_fill_fermenter(
      limits = c(0, 7),
      n.breaks = 6,
      palette = "YlOrBr",
      direction = -1,
      na.value = "gray90",
      guide = "colorbar" 
    ) +
      labs(
        title = "Population & Fertility Rate",
        subtitle = "Filtered by year: 2022"
      ) +
      theme(
        plot.title = element_text(size = 12, hjust = 0.5),
        plot.subtitle = element_text(size = 10, hjust = 0.5),
        plot.caption = element_text(size = 8, hjust = 1)
      ) +
      coord_fixed(ratio = 1.3)

    ggplotly(mapa_animado_3, tooltip = "text")
  })
}

shinyApp(ui, server)

```

# Add world boundaries and land to the map with geojson files
```{r}
countries <-
  "borders/WB_countries_Admin0.geojson" |>
  read_sf() |>
  ms_simplify() |>
  st_make_valid()

land <-
  "borders/WB_Land.geojson" |>
  read_sf() |>
  ms_simplify() |>
  st_cast("MULTIPOLYGON")

polygon <- st_polygon(
  x = list(rbind(
    c(-180.0001, 90),
    c(-179.9999, 90),
    c(-179.9999, -90),
    c(-180.0001, -90),
    c(-180.0001, 90)
  ))
) |>
  st_sfc() |>
  st_set_crs(4326) # Equirectangular projection
countries <-
  countries |>
  mutate(geometry = st_difference(geometry, polygon)) |>
  st_make_valid()
```

# Convert the 'Fertility' column to a numeric type.
```{r}
data <- data %>%
  mutate(Fertility = as.numeric(as.character(Fertility)))
```

# Left join to Country Code
```{r}
joined_data <- countries %>%
  left_join(data, by = c("WB_A3" = "CountryCode"))
```

# Create a polygon object to represent the Earth's outline. 
```{r}
earth <- st_polygon(
  x = list(
    cbind(
      c(rep(-180, 181), rep(180, 181), -180), c(-90:90, 90:-90, -90)
    )
  )
) |>
  st_sfc() |>
  st_set_crs(4326) |> # Equirectangular projection
  st_as_sf()
```

# Plot map on ggplotly
```{r}
joined_data$hover_text <- paste("Country: ", joined_data$Country, "<br>Fertility Rate: ", joined_data$Fertility, "<br>Population: ", joined_data$Population)

fig_4 <- 
  ggplot(joined_data) +
  geom_sf(data = earth, fill = "aliceblue") +
  geom_sf(data = land, fill = "gray90") +
  geom_sf(aes(fill = Fertility, text = hover_text), color = NA) + 
  scale_fill_viridis_c(option = "C", direction = -1, name = "Fertility Rate") + 
  scale_fill_fermenter(
      limits = c(0, 7),
      n.breaks = 6,
      palette = "YlOrBr",
      direction = -1,
      na.value = "gray90",
      guide = "colorbar" 
    ) +
  coord_sf(crs = st_crs("+proj=eqearth")) +
  theme_minimal() +
  theme(legend.position = "right")

fig_5 <- ggplotly(fig_4, tooltip = "text") 

fig_5
```

# Plot map onto shiny app
```{r}
ui <- fluidPage(
  titlePanel("Interactive World Map"),
  sidebarLayout(
    sidebarPanel(
      helpText("Adjust the slider to filter countries based on their fertility rate. Use the button to highlight countries with a fertility rate below 2.1."),
      tags$p("Note: The slider marks at 2.1 represent the average fertility rate."),
      sliderInput("fertility_range", "Fertility Rate Range:",
                  min = 0,  # Preset min and max for simplicity, adjust based on your data
                  max = 7,
                  value = c(0, 7),
                  step = 0.1),
      actionButton("toggle_fertility", "Toggle Highlight Countries Below 2.1")
    ),
    mainPanel(
      plotlyOutput("worldMap"),
    )
  )
)

server <- function(input, output, session) {
  highlight_low_fertility <- reactiveVal(FALSE)

  observeEvent(input$toggle_fertility, {
    highlight_low_fertility(!highlight_low_fertility())
  })
  
  output$worldMap <- renderPlotly({
    filtered_data <- joined_data %>%
      filter(Fertility >= input$fertility_range[1], Fertility <= input$fertility_range[2])
      
    if (highlight_low_fertility()) {
      filtered_data$Fertility[filtered_data$Fertility >= 2.1] <- NA
    }
    
    fig_4 <- 
      ggplot(filtered_data) +
      geom_sf(data = earth, fill = "aliceblue") +
      geom_sf(data = land, fill = "gray90") +
      geom_sf(aes(fill = Fertility, text = hover_text), color = NA) +
      scale_fill_viridis_c(option = "C", direction = -1, name = "Fertility Rate", limits = c(0, 7), na.value = "gray90") +
      scale_fill_fermenter(
        limits = c(0, 7),
        n.breaks = 6,
        palette = "YlOrBr",
        direction = -1,
        na.value = "gray90",
        guide = "colorbar" 
      ) + 
      coord_sf(crs = st_crs("+proj=eqearth")) +
      theme_minimal() +
      theme(
        legend.position = "right",
        axis.text.x = element_text(angle = 0) 
      )
    
    ggplotly(fig_4, tooltip = "text")
  })
}

# Run the application
shinyApp(ui, server)
```

kj
```{r}
# Plot map onto shiny app
ui <- fluidPage(
  titlePanel("Interactive World Map"),
  sidebarLayout(
    sidebarPanel(
      helpText("Adjust the slider to filter countries based on their fertility rate. Use the button to highlight countries with a fertility rate below 2.1."),
      tags$p("Note: The slider marks at 2.1 represent the average fertility rate."),
      sliderInput("fertility_range", "Fertility Rate Range:",
                  min = 0,
                  max = 7,
                  value = c(0, 7),
                  step = 0.1),
      actionButton("toggle_fertility", "Toggle Highlight Countries Below 2.1")
    ),
    mainPanel(
      plotlyOutput("worldMap"),
      plotlyOutput("popBarGraph") # Output for the line graph
    )
  )
)

server <- function(input, output, session) {
  highlight_low_fertility <- reactiveVal(FALSE)

  observeEvent(input$toggle_fertility, {
    highlight_low_fertility(!highlight_low_fertility())
  })

  output$worldMap <- renderPlotly({
    filtered_data <- joined_data %>%
      filter(Fertility >= input$fertility_range[1], Fertility <= input$fertility_range[2])

    if (highlight_low_fertility()) {
      filtered_data$Fertility[filtered_data$Fertility >= 2.1] <- NA
    }

    fig_4 <- 
      ggplot(filtered_data) +
      geom_sf(data = earth, fill = "aliceblue") +
      geom_sf(data = land, fill = "gray90") +
      geom_sf(aes(fill = Fertility, text = hover_text), color = NA) +
      scale_fill_viridis_c(option = "C", direction = -1, name = "Fertility Rate", limits = c(0, 7), na.value = "gray90") +
      scale_fill_fermenter(
        limits = c(0, 7),
        n.breaks = 6,
        palette = "YlOrBr",
        direction = -1,
        na.value = "gray90",
        guide = "colorbar"
      ) + 
      coord_sf(crs = st_crs("+proj=eqearth")) +
      theme_minimal() +
      theme(
        legend.position = "right",
        axis.text.x = element_text(angle = 0)
      )

    ggplotly(fig_4, tooltip = "text")
  })

output$popBarGraph <- renderPlotly({
  # Filter data based on fertility range input
  filtered_data <- joined_data %>%
    filter(Fertility >= input$fertility_range[1], Fertility <= input$fertility_range[2])

  # Aggregate data for the line graph and collect country names
  line_data <- filtered_data %>%
    group_by(Fertility_bin = cut_width(Fertility, 0.5)) %>%
    summarize(
      Population = sum(Population, na.rm = TRUE),
      Countries = paste(unique(Country), collapse = ", ")
    ) %>%
    ungroup() %>%
    arrange(Fertility_bin) # Ensure data is ordered

  # Plot the line graph
  line_plot <- ggplot(line_data, aes(x = Fertility_bin, y = Population, text = Countries, group = 1)) +
    geom_line(color = "blue") + # Add a line
    geom_point(color = "red") + # Add points
    labs(x = "Fertility Rate", y = "Population") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + # Rotate x-axis labels for better readability
    scale_y_continuous(labels = scales::comma_format()) # Format y-axis labels to display population in comma-separated format

  # Add tooltips for hover-over interaction
  ggplotly(line_plot, tooltip = "text")
})
}

# Run the Shiny app
shinyApp(ui, server)

```





