---
title: "axel code"
author: "axel"
format: html
---



# Creating a interactive choropleth world map 

```{r}
library(gapminder)
library(ggplot2)
library(plotly)
library(dplyr)
library(ggthemes)
library(RColorBrewer)
library(crosstalk)
library(DT)
```


```{r}
world <- map_data("world") %>%
  filter(region != "Antarctica")
```

```{r}
data <- read.csv("/private/clean.csv")
head(data)


data <- data %>%
  mutate(Fertility = as.numeric(as.character(Fertility.Rate)))
head(data)
```


```{r}

# Assuming 'world' and 'data' are already loaded and prepared
# Create a hover text column in 'data'
data$hover_text <- paste("Country: ", data$Country, "<br>Fertility Rate: ", data$Fertility)

# Proceed with your plotting

mapa_animado_3 <- data %>%
  right_join(world, by = c(Country = "region")) %>%
  ggplot(aes(x = long, y = lat, group = group, fill = Fertility, text = hover_text)) + # Added 'text' aesthetic for custom hover info
  geom_polygon(color = "white", size = 0.01) +
  theme_void() +
  scale_fill_distiller(palette = "Spectral", name = "Fertility Rate") + # Use a continuous palette
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022")  +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object with hoverinfo
fig_3 <- ggplotly(mapa_animado_3, tooltip = "text") # Specify 'text' to use the 'text' aesthetic for the tooltip
```

incorporate earth boundary onto fig_3
```{r}
# Create a hover text column in 'data'
data$hover_text <- paste("Country: ", data$Country, "<br>Fertility Rate: ", data$Fertility)

# Define the Earth boundary data
earth_boundary <- map_data("world") %>%
  filter(region == "Antarctica")  # Select the region representing the Earth boundary

# Proceed with your plotting
mapa_animado_3 <- data %>%
  right_join(world, by = c("Country" = "region")) %>%
  ggplot(aes(x = long, y = lat, group = group, fill = Fertility Rate, text = hover_text)) + # Added 'text' aesthetic for custom hover info
  geom_polygon(color = "white", size = 0.01) +
  geom_path(data = earth_boundary, aes(x = long, y = lat), color = "blue", size = 1) +  # Add Earth boundary
  theme_void() +
  scale_fill_distiller(palette = "Spectral", name = "Fertility Rate") + # Use a continuous palette
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022")  +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object with hoverinfo
fig_3 <- ggplotly(mapa_animado_3, tooltip = "text") 

```



```{r}
# Load required libraries
library(shiny)
library(crosstalk)
library(plotly)
library(DT)
library(dplyr)
library(ggplot2)

# Define UI
ui <- fluidPage(
  titlePanel("Interactive World Map and Data Table"),
  plotlyOutput("worldMap"),
  DTOutput("dataTable")
)

# Define server logic
server <- function(input, output, session) {
  # Generate world map data
  world <- map_data("world") %>%
    filter(region != "Antarctica")
  
  # Assuming your dataset has a column named 'Country' with country names
  # Adjust the column name as per your actual dataset
  data_with_country <- data %>%
    right_join(world, by = c(Country = "region"))%>%
    distinct(Country, .keep_all = TRUE)
  
  # Create shared data object
  shared_data <- SharedData$new(data_with_country)
  
  # Render the world map
  output$worldMap <- renderPlotly({
    p <- data %>%
      right_join(map_data("world") %>% filter(region != "Antarctica"), by = c(Country = "region")) %>%
      ggplot(aes(x = long, y = lat, group = group, fill = Fertility, key = Country)) + # Add 'key' aesthetic
      geom_polygon(color = "white", size = 0.01) +
      theme_void() +
      scale_fill_distiller(palette = "Spectral", name = "Fertility Rate") +
      labs(title = "Population & Fertility Rate", subtitle = "year: 2022") +
      theme(
        plot.title = element_text(size = 12, hjust = 0.5),
        plot.subtitle = element_text(size = 10, hjust = 0.5),
        plot.caption = element_text(size = 8, hjust = 1)
      ) +
      coord_fixed(ratio = 1.3)
    
    ggplotly(p, source = "worldMap") %>%
      layout(dragmode = "select")
  })

  # Render DataTable with server-side processing
  output$dataTable <- renderDT(server = TRUE, {
    datatable(data_with_country, options = list(
      server = TRUE, 
      processing = TRUE,
      searching = TRUE,
      paging = TRUE
    ))
  })
}

# Run the application
shinyApp(ui = ui, server = server)

```
 
 