---
title: "Global Population Growth and Decline"
author: "Red Team\n\nAxel Goh(2203412)\n\nJeffrey Mak Chee Hong(2201194)\n\nTristan Raj Shankar(2203491)\n\nRuchel Lee Wen Xuan(2202719)\n\nYong Kai Jie(2203201)"
format: html
editor: visual
slide-number: true
runtime: shiny
output: slidy_presentation
---

```{r}
#| echo: false
#| message: false
#| warning: false
library(gapminder)
library(plotly)
library(ggthemes)
library(RColorBrewer)
library(crosstalk)
library(DT) # To load data tables
library(tidyverse) # Include ggplot2, dpylr
library(readxl)
library(rmapshaper)
library(sf)
library(maps)
library(shiny)
library(knitr)
```

## Table of Contents

-   Chosen Visualisation Example
-   Critical Assessment of the Original Visualisation
-   Data Used & Data Preparation Process
-   Steps Taken to improve the plot
-   Final Visualisation Demo

## Chosen Data Visualisation Example (Part 1)

```{r}
#| label: fig-nyt1
#| echo: false
#| message: false
#| warning: false
#| 
#| fig-cap: "Source: U.N. World Population Prospects 2022 Note: Only countries with at least one million people are included."

## include graphic size to 50% of slide, align left
#| width: 50%
#| align: left
# out.width="10%", fig.retina = 1 fig.align='left'
knitr::include_graphics("NYT1.jpeg")

```

## Chosen Data Visualisation Example (Part 2)

```{r}
#| label: fig-nyt2
#| echo: false
#| message: false
#| warning: false
#| fig-cap: "Source: U.N. World Population Prospects 2022 Note: Only countries with at least one million people are included."

## include graphic size to 50% of slide, align left
#| width: 50%
#| align: left
# out.width="10%", fig.retina = 1 fig.align='left'
knitr::include_graphics("NYT2.jpeg")

```

## General

::: columns
::: {.column width="35%"}
-   Three variables: country population and fertility rate
-   Depiction of Population through bubble size with a relevant Legend
:::

::: {.column width="65%"}
```{r}
#| echo: false
#| message: false
#| warning: false

include_graphics("NYT1.jpeg")

```
:::
:::

## General

::: columns
::: {.column width="35%"}
-   Colour Coding to distinguish between countries with regards to Fertility Rate
-   Interactive features such as hover text to see Fertility rate
:::

::: {.column width="65%"}
```{r}
#| echo: false
#| message: false
#| warning: false

include_graphics("NYT2.jpeg")

```
:::
:::

## Strengths

-   Colour Contrast
-   Bubble Sizes
-   Clear Y-Axis

## Weaknesses

-   Entire graph not visible without scrolling
-   Population size precision through bubbles
-   Difficult to search for specific countries data
-   Clutter of bubbles

## Data Used

-   Loaded the U.N. World Population Prospects 2022 dataset.
-   Decided on the U.N. dataset over the World Bank dataset due to fewer missing fertility values.
-   Used R's built-in "world" dataset for initial country outlines and mapping context.

## Data Prepation Process (Fertility and Population Data)

-   Utilized Columns Population, Fertility Rate for year 2022, and Country Name.
-   Removed NA Columns
-   Converted Fertility Rate to Numeric

## Cleaning and processing of data, output top 6 rows

```{r}
#| echo: false
#| message: false
#| warning: false

data <- read.csv("test.csv")
  

data <- data %>%
  mutate(Fertility = as.numeric(as.character(Fertility)))
head(data)

world <- map_data("world")

```

## Data Preparation Process (Geographic Data) {.smaller}

-   Joined demographic data with R's world map by country region.
-   Imported and processed GeoJSON files for detailed country and land borders.
-   Simplified geometries for improved performance and validated with spatial data standards.
-   Standardized data to "MULTIPOLYGON" format for mapping compatibility.
-   Prepared base map layer and custom polygon objects for visualization.
-   Combined spatial and demographic data for mapping fertility and population metrics.
-   Curated data columns for final visual display.

## Improvements to Original Plot

-   Changed to a Map Visualisation
-   Utilised ColorBrewerâ€™s palette to colour code different Fertility Rate in a range from 1-7
-   Implemented Sequential Binned Colours for accessibility
-   In built ggplotly modebar to Zoom in the map to look for smaller countries
-   Hover-effect over countries to show fertility rate and population data

## Initial Plot

```{r}
#| echo: false
#| message: false
#| warning: false

# Create a hover text column in 'data'
data$hover_text <- paste("Country: ", data$Country, "<br>Fertility Rate: ", data$Fertility, "<br>Population: ", data$Population)


joined_data <- data %>%
  right_join(world, by = c(Country = "region")) 

# Define the breaks and corresponding colors manually for "YlOrRd"
breaks <- c(0, 1, 2, 3, 4, 5, 6, 7)
colors <- colorRampPalette(rev(brewer.pal(9, "YlOrRd")))(length(breaks) - 1)

# Plot
mapa_animado_3 <- joined_data %>%
  ggplot(aes(x = long, y = lat, group = group, fill = Fertility, text = hover_text)) +
  geom_polygon(color = "white", size = 0.01) +
  theme_void() +
      scale_fill_fermenter(
        limits = c(0, 7),
        n.breaks = 6,
        palette = "YlOrBr",
        direction = -1,
        na.value = "gray90",
        guide = "colorbar"
      )  +
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022") +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object with hoverinfo
fig_3 <- ggplotly(mapa_animado_3, tooltip = "text")
fig_3

```

## Add ColourBrewer's colour gradient to the map

```{r}
#| echo: false
#| message: false
#| warning: false

# Create a hover text column in 'data'
data$hover_text <- paste("Country: ", data$Country, "<br>Fertility Rate: ", data$Fertility, "<br>Population: ", data$Population)

joined_data <- data %>%
  right_join(world, by = c(Country = "region")) 

# Define the breaks and corresponding colors manually for "YlOrRd"
breaks <- c(0, 1, 2, 3, 4, 5, 6, 7)
colors <- colorRampPalette(rev(brewer.pal(9, "YlOrRd")))(length(breaks) - 1)

# Plot
mapa_animado_3 <- joined_data %>%
  ggplot(aes(x = long, y = lat, group = group, fill = Fertility, text = hover_text)) +
  geom_polygon(color = "white", size = 0.01) +
  theme_void() +
  scale_fill_gradientn(
    colours = colors,
    breaks = breaks,
    labels = as.character(breaks),
    values = scales::rescale(breaks, to = c(0, 1)),
    guide = guide_colorbar(title = "Fertility Rate", title.position = "top", title.hjust = 0.5),
    na.value = "grey90"
  ) +
  labs(title = "Population & Fertility Rate", subtitle = "year: 2022") +
  theme(
    plot.title = element_text(size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1)
  ) +
  coord_fixed(ratio = 1.3)

# Convert ggplot object to a ggplotly object with hoverinfo
fig_3 <- ggplotly(mapa_animado_3, tooltip = "text")
fig_3

countries <-
  "borders/WB_countries_Admin0.geojson" |>
  read_sf() |>
  ms_simplify() |>
  st_make_valid() 

land <-
  "borders/WB_Land.geojson" |>
  read_sf() |>
  ms_simplify() |>
  st_cast("MULTIPOLYGON")

polygon <- st_polygon(
  x = list(rbind(
    c(-180.0001, 90),
    c(-179.9999, 90),
    c(-179.9999, -90),
    c(-180.0001, -90),
    c(-180.0001, 90)
  ))
) |>
  st_sfc() |>
  st_set_crs(4326) # Equirectangular projection
countries <-
  countries |>
  mutate(geometry = st_difference(geometry, polygon)) |>
  st_make_valid()

```

```{r}
#| echo: false
#| message: false
#| warning: false

# Join the data with the country code and convert the 'Fertility' column to numeric
earth <- st_polygon(
  x = list(
    cbind(
      c(rep(-180, 181), rep(180, 181), -180), c(-90:90, 90:-90, -90)
    )
  )
) |>
  st_sfc() |>
  st_set_crs(4326) |> # Equirectangular projection
  st_as_sf()

# Join the data with the country code and convert the 'Fertility' column to numeric
# Convert the 'Fertility' column to a numeric type.
data <- data %>%
  mutate(Fertility = as.numeric(as.character(Fertility))) 

# Left join to Country Code
joined_data <- countries %>%
  left_join(data, by = c("WB_A3" = "CountryCode"))
```

## Plotting on GGPlotly

```{r}
#| echo: false
#| message: false
#| warning: false
fig_4 <- 
  ggplot(joined_data) +
  geom_sf(data = earth, fill = "aliceblue") +
  geom_sf(data = land, fill = "gray90") +
  geom_sf(aes(fill = Fertility, text = hover_text), color = NA) + 
  scale_fill_viridis_c(option = "C", direction = -1, name = "Fertility Rate") + 
  scale_fill_fermenter(
      limits = c(0, 7),
      n.breaks = 6,
      palette = "YlOrBr",
      direction = -1,
      na.value = "gray90",
      guide = "colorbar" 
    ) +
  coord_sf(crs = st_crs("+proj=eqearth")) +
  theme_minimal() +
  theme(legend.position = "right")

fig_5 <- ggplotly(fig_4, tooltip = "text") 

fig_5
```

## Additions to the Plot

-   Line Chart to show correlation between Population Size and Fertility Rate
-   Added a data table that allows you to search for a country & each column can filter by min/max
-   Scrollable scale on the LHS to toggle replacement fertility ranges
-   Button-toggle to show countries below replacement fertility

## Usage of Shiny

-   Shiny enables the creation of interactive web applications.
-   Reduce the load on the client-side and speed up the application's performance.
-   Allow interactions and animation such as the slider and button function to display on our world map:
-   Dynamic Filtering:
-   Conditional Display:

## 

```{r}
#| echo: false
#| message: false
#| warning: false
# Declaring Hover Text

joined_data$hover_text <- paste("Country: ", joined_data$Country, "<br>Fertility Rate: ", joined_data$Fertility, "<br>Population: ", joined_data$Population)
selected_data <- joined_data %>%
  select(REGION_WB, GDP_MD_EST, WB_NAME, NAME_ZH, CONTINENT, POP_EST, Fertility, Population)

ui <- fluidPage(
  titlePanel("Interactive World Map"),
  sidebarLayout(
    sidebarPanel(
      helpText(tags$b("A rate of about 2.1 is known as Replacement Fertility because the population would stabilize if every two people had two children.")),
      helpText("Adjust the slider to filter countries based on their fertility rate. Use the button to highlight countries with a fertility rate below 2.1."),
      tags$p("Note: The slider mark at 2.1 represent the Replacement Fertility rate."),
      sliderInput("fertility_range", "Fertility Rate Range:",
                  min = 0,
                  max = 7,
                  value = c(0, 7),
                  step = 0.1),
      actionButton("toggle_fertility", "Countries Below Replacement Fertility")
    ),
mainPanel(
      plotlyOutput("worldMap"), # Output for the world map 
      plotlyOutput("popBarGraph"), # Output for the line graph 
      DTOutput("countryTable") # Output for the data table 
)
)
)

server <- function(input, output, session) {
  highlight_low_fertility <- reactiveVal(FALSE)

  observeEvent(input$toggle_fertility, {
    highlight_low_fertility(!highlight_low_fertility())
  })

  output$worldMap <- renderPlotly({
    filtered_data <- joined_data %>%
      filter(Fertility >= input$fertility_range[1], Fertility <= input$fertility_range[2])

    if (highlight_low_fertility()) {
      filtered_data$Fertility[filtered_data$Fertility >= 2.1] <- NA
    }

    fig_4 <- 
      ggplot(filtered_data) +
      geom_sf(data = earth, fill = "aliceblue") +
      geom_sf(data = land, fill = "gray90") +
      geom_sf(aes(fill = Fertility, text = hover_text), color = NA) +
      scale_fill_viridis_c(option = "C", direction = -1, name = "Fertility Rate", limits = c(0, 7), na.value = "gray90") +
      scale_fill_fermenter(
        limits = c(0, 7),
        n.breaks = 6,
        palette = "YlOrBr",
        direction = -1,
        na.value = "gray90",
        guide = "colorbar"
      ) + 
      coord_sf(crs = st_crs("+proj=eqearth")) +
      theme_minimal() +
      theme(
        legend.position = "right",
        axis.text.x = element_text(angle = 0)
      )

    ggplotly(fig_4, tooltip = "text")
  })

output$popBarGraph <- renderPlotly({
  # Filter data based on fertility range input
  filtered_data <- joined_data %>%
    filter(Fertility >= input$fertility_range[1], Fertility <= input$fertility_range[2])

  # Aggregate data for the line graph and count the number of countries
  line_data <- filtered_data %>%
    group_by(Fertility_bin = cut_width(Fertility, 0.5)) %>%
    summarize(
      Population = sum(Population, na.rm = TRUE),
      Country_Count = n() # Count the number of countries in each bin
    ) %>%
    ungroup() %>%
    arrange(Fertility_bin) # Ensure data is ordered

  # Plot the line graph
  line_plot <- ggplot(line_data, aes(x = Fertility_bin, y = Population, text = paste("Countries Count: ", Country_Count), group = 1)) +
    geom_line(color = "#0570b0") + # Add a line
    geom_point(color = "#cc4c02") + # Add points
    labs(x = "Fertility Rate", y = "Population") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + # Rotate x-axis labels for better readability
    scale_y_continuous(labels = scales::comma_format()) # Format y-axis labels to display population in comma-separated format

  # Add tooltips for hover-over interaction
  ggplotly(line_plot, tooltip = "text")
})

# Render the data table
output$countryTable <- renderDT({
  selected_data 
})
}

# Run the Shiny app
shinyApp(ui, server)


```

```{r}

```
